import { Injectable, UnauthorizedException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';

import { randomUUID } from 'crypto';
import { get, map } from 'lodash';

import { SessionService, SessionData } from '@/modules/auth/services/session.service';
import { getTokenConfig } from '@/modules/security/config/key.config';
import { KeyManagerService } from '@/modules/security/services/key-manager.service';
import { KEY_TYPES } from '@/modules/security/types/key.types';
import { RbacService } from '@/modules/users/services/rbac.service';
import { UsersService } from '@/modules/users/users.service';

import { AuthResponseDto } from './dto/auth-response.dto';
import { LoginDto } from './dto/login.dto';

interface JwtPayload {
    sub: string;
    email: string;
    role?: string;
    type: string;
    jti: string;
    sid: string; // ðŸ”¥ KEEP: Session ID stays in payload for security
    iat?: number;
    exp?: number;
    iss?: string;
    aud?: string;
}

interface UserInfo {
    id: string;
    email: string;
    firstName?: string;
    lastName?: string;
    isActive: boolean;
    emailVerified: boolean;
}

interface RefreshTokenSessionData {
    sid: string;
    id: string;
    email: string;
    firstName?: string;
    lastName?: string;
    isActive: boolean;
    emailVerified: boolean;
    permissions: string[];
    roles: Array<{ id: string; name: string; displayName?: string }>;
    accessTokenJti: string;
    refreshTokenJti: string;
    accessTokenExpiry: Date;
    refreshTokenExpiry: Date;
    createdAt: Date;
    lastUsedAt: Date;
}

interface RefreshTokenUserData {
    id: string;
    email: string;
    role?: string;
    jti: string;
    sid: string;
    refreshToken: string;
    sessionData: RefreshTokenSessionData;
}

const JWT_ISSUER = 'nvn-backend';
const JWT_AUDIENCE = 'nvn-users';

@Injectable()
export class AuthService {
    constructor(
        private readonly usersService: UsersService,
        private readonly rbacService: RbacService,
        private readonly keyManagerService: KeyManagerService,
        private readonly jwtService: JwtService,
        private readonly sessionService: SessionService,
    ) {
        // No complex validation needed - simple token-based calculation
    }

    async validateUser(email: string, password: string): Promise<UserInfo> {
        const user = await this.usersService.validatePassword(email, password);
        if (!user) {
            throw new UnauthorizedException('Invalid credentials');
        }
        return user.toJSON();
    }

    async login(loginDto: LoginDto): Promise<AuthResponseDto> {
        const user = await this.validateUser(get(loginDto, 'email'), get(loginDto, 'password'));

        // ðŸ”¥ NEW: Generate Session ID for this login session
        const sessionId = randomUUID();

        // Load user with roles and permissions
        const userWithRoles = await this.rbacService.getUserWithRoles(get(user, 'id'));
        const userPermissions = await this.rbacService.getUserPermissions(get(user, 'id'));

        // Generate access token and refresh token with session reference
        const [accessToken, refreshToken] = await Promise.all([
            this.generateAccessToken(user, sessionId),
            this.generateRefreshToken(user, sessionId),
        ]);

        // Decode tokens to get JTIs
        const accessPayload = this.jwtService.decode<JwtPayload>(accessToken);
        const refreshPayload = this.jwtService.decode<JwtPayload>(refreshToken);

        // ðŸ”¥ NEW: Create session data
        const sessionData: SessionData = {
            sid: sessionId,
            id: get(user, 'id'),
            email: get(user, 'email'),
            firstName: get(user, 'firstName'),
            lastName: get(user, 'lastName'),
            isActive: get(user, 'isActive'),
            emailVerified: get(user, 'emailVerified'),
            permissions: userPermissions,
            roles: map(get(userWithRoles, 'roles'), (role) => ({
                id: get(role, 'id'),
                name: get(role, 'name'),
                displayName: get(role, 'displayName'),
            })),
            accessTokenJti: get(accessPayload, 'jti'),
            refreshTokenJti: get(refreshPayload, 'jti'),
            accessTokenExpiry: new Date(Date.now() + getTokenConfig(KEY_TYPES.ACCESS_TOKEN).seconds * 1000),
            refreshTokenExpiry: new Date(Date.now() + getTokenConfig(KEY_TYPES.REFRESH_TOKEN).seconds * 1000),
            createdAt: new Date(),
            lastUsedAt: new Date(),
        };

        // ðŸ”¥ DELEGATED: Cache session data and track user session
        await Promise.all([
            this.sessionService.cacheSessionData(sessionId, sessionData),
            this.sessionService.trackUserSession(get(user, 'id'), sessionId),
        ]);

        const accessTokenConfig = getTokenConfig(KEY_TYPES.ACCESS_TOKEN);
        const refreshTokenConfig = getTokenConfig(KEY_TYPES.REFRESH_TOKEN);

        return {
            accessToken,
            refreshToken,
            user: {
                id: get(user, 'id'),
                email: get(user, 'email'),
                firstName: get(user, 'firstName'),
                lastName: get(user, 'lastName'),
                isActive: get(user, 'isActive'),
                emailVerified: get(user, 'emailVerified'),
            },
            expiresIn: get(accessTokenConfig, 'seconds'),
            refreshExpiresIn: get(refreshTokenConfig, 'seconds'),
        };
    }

    async refreshTokenWithSessionData(userData: RefreshTokenUserData): Promise<AuthResponseDto> {
        // âœ… NO DUPLICATE VALIDATION - Strategy already did all the work!
        const { sessionData } = userData;

        // Generate new access token AND new refresh token (token rotation)
        const [newAccessToken, newRefreshToken] = await Promise.all([
            this.generateAccessToken(sessionData, sessionData.sid),
            this.generateRefreshToken(sessionData, sessionData.sid),
        ]);

        // Decode tokens to get new JTIs
        const newAccessPayload = this.jwtService.decode<JwtPayload>(newAccessToken);
        const newRefreshPayload = this.jwtService.decode<JwtPayload>(newRefreshToken);
        // Update session with new JTIs and timestamps
        sessionData.accessTokenJti = newAccessPayload.jti;
        sessionData.refreshTokenJti = newRefreshPayload.jti;
        sessionData.accessTokenExpiry = new Date(Date.now() + getTokenConfig(KEY_TYPES.ACCESS_TOKEN).seconds * 1000);
        sessionData.refreshTokenExpiry = new Date(Date.now() + getTokenConfig(KEY_TYPES.REFRESH_TOKEN).seconds * 1000);
        sessionData.lastUsedAt = new Date();

        // ðŸ”¥ DELEGATED: Update session cache with new JTIs
        await this.sessionService.cacheSessionData(sessionData.sid, sessionData);

        const accessTokenConfig = getTokenConfig(KEY_TYPES.ACCESS_TOKEN);
        const refreshTokenConfig = getTokenConfig(KEY_TYPES.REFRESH_TOKEN);

        return {
            accessToken: newAccessToken,
            refreshToken: newRefreshToken, // ðŸ”¥ FIXED: Return new refresh token
            user: {
                id: sessionData.id,
                email: sessionData.email,
                firstName: sessionData.firstName,
                lastName: sessionData.lastName,
                isActive: sessionData.isActive,
                emailVerified: sessionData.emailVerified,
            },
            expiresIn: accessTokenConfig.seconds,
            refreshExpiresIn: refreshTokenConfig.seconds,
        };
    }

    async logout(refreshToken: string): Promise<void> {
        try {
            const payload = this.jwtService.decode<JwtPayload>(refreshToken);
            const sessionData = await this.sessionService.getSessionBySid(get(payload, 'sid'));
            if (sessionData && sessionData.refreshTokenJti === get(payload, 'jti')) {
                await this.sessionService.removeSessionFromCache(get(payload, 'sid'), get(payload, 'sub'));
            }
        } catch {
            // Ignore errors during logout - best effort cleanup
        }
    }

    async logoutWithSessionData(sessionData: RefreshTokenSessionData): Promise<void> {
        // âœ… NO DUPLICATE VALIDATION - Strategy already validated everything!
        try {
            // Delete session completely instead of blacklisting
            await this.sessionService.removeSessionFromCache(sessionData.sid, sessionData.id);
        } catch {
            // Ignore errors during logout - best effort cleanup
        }
    }

    async logoutAll(userId: string): Promise<void> {
        // ðŸ”¥ DELEGATED: Delete all user sessions instead of blacklisting
        await this.sessionService.deleteAllUserSessions(userId);
    }

    private async generateAccessToken(user: UserInfo, sessionId: string): Promise<string> {
        const activeKeyId = await this.keyManagerService.getActiveKey(KEY_TYPES.ACCESS_TOKEN);
        const privateKey = await this.keyManagerService.getPrivateKey(activeKeyId);

        const payload: JwtPayload = {
            sub: get(user, 'id'),
            email: get(user, 'email'),
            type: 'access',
            jti: randomUUID(),
            sid: sessionId, // ðŸ”¥ KEEP: Session ID stays in payload for security
        };

        const tokenConfig = getTokenConfig(KEY_TYPES.ACCESS_TOKEN);

        return this.jwtService.sign(payload, {
            secret: privateKey,
            algorithm: 'RS256',
            expiresIn: get(tokenConfig, 'expiresIn'), // 1d from config
            issuer: JWT_ISSUER,
            audience: JWT_AUDIENCE,
            keyid: activeKeyId, // âœ… Set kid in header for standard compliance
        });
    }

    private async generateRefreshToken(user: UserInfo, sessionId: string): Promise<string> {
        const activeKeyId = await this.keyManagerService.getActiveKey(KEY_TYPES.REFRESH_TOKEN);
        const privateKey = await this.keyManagerService.getPrivateKey(activeKeyId);

        const payload: JwtPayload = {
            sub: get(user, 'id'),
            email: get(user, 'email'),
            type: 'refresh',
            jti: randomUUID(),
            sid: sessionId, // ðŸ”¥ KEEP: Session ID stays in payload for security
        };

        const tokenConfig = getTokenConfig(KEY_TYPES.REFRESH_TOKEN);

        return this.jwtService.sign(payload, {
            secret: privateKey,
            algorithm: 'RS256',
            expiresIn: get(tokenConfig, 'expiresIn'), // 30d from config
            issuer: JWT_ISSUER,
            audience: JWT_AUDIENCE,
            keyid: activeKeyId, // âœ… Set kid in header for standard compliance
        });
    }
}

/*
ðŸ”¥ ULTRA OPTIMIZED CACHING ARCHITECTURE (SID in JWT)
===================================================

OLD APPROACH (Too many keys + slow lookups):
- nvn:auth:session:{sid} â†’ Full session data  
- nvn:auth:refresh:{sid} â†’ Basic user info
- nvn:auth:access:map:{jti} â†’ sid
- nvn:auth:refresh:map:{jti} â†’ sid 
- nvn:auth:user:sessions:{userId} â†’ Set of SIDs
- Need Redis KEYS scan to find session by JTI

NEW APPROACH (Minimal keys + lightning fast):
- nvn:auth:session:{sid} â†’ Contains EVERYTHING (user data + permissions + both JTIs + expiry dates)
- nvn:auth:user:sessions:{userId} â†’ Set of SIDs (for user session tracking)
- nvn:auth:blacklist:session:{sid} â†’ Blacklisted sessions
- JWT contains SID â†’ Direct Redis GET (no scanning needed!)

BENEFITS:
âœ… Reduced Redis memory usage (3 keys instead of 5+ keys per session)
âœ… Atomic data consistency (all session data in one place)
âœ… Simplified logic (no separate mappings to maintain)
âœ… LIGHTNING FAST token validation (direct Redis GET using SID from JWT)
âœ… No Redis KEYS scan needed (O(1) vs O(n) complexity)

JWT PAYLOAD STRUCTURE:
{
  sub: "user-id",
  email: "user@example.com", 
  type: "access|refresh",
  jti: "unique-token-id",
  sid: "session-id", // ðŸ”¥ KEY OPTIMIZATION: Direct session access
  keyId: "rsa-key-id"
}

SESSION DATA STRUCTURE:
{
  // User data
  id, email, firstName, lastName, isActive, emailVerified,
  permissions: ['users:read', 'posts:write'],
  roles: [{id, name, displayName}],
  
  // Session metadata  
  sid: "uuid",
  accessTokenJti: "access-jwt-id",
  refreshTokenJti: "refresh-jwt-id", 
  accessTokenExpiry: Date,
  refreshTokenExpiry: Date,
  createdAt: Date,
  lastUsedAt: Date,
  userAgent?: string,
  ipAddress?: string
}

PERFORMANCE:
- Token validation: O(1) Redis GET (instead of O(n) KEYS scan)
- Session access: Single Redis operation
- Memory usage: ~60% reduction in total keys
*/
