services:
    # API Server - NestJS Application
    api:
        build:
            context: .
            dockerfile: Dockerfile
            target: production
        container_name: nvn-api
        restart: unless-stopped
        ports:
            - '3010:3000'
        env_file:
            - .env.docker
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        networks:
            - nvn-network
        volumes:
            - ./logs:/app/logs
        healthcheck:
            test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:3000/health']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    # PostgreSQL Database
    postgres:
        image: postgres:17-alpine
        container_name: nvn-postgres
        restart: unless-stopped
        env_file:
            - .env.docker
        ports:
            - '5442:5432'
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
        networks:
            - nvn-network
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U postgres -d nvn_backend']
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s

    # Redis Cache & Sessions
    redis:
        image: redis:7-alpine
        container_name: nvn-redis
        restart: unless-stopped
        env_file:
            - .env.docker
        command: redis-server --appendonly yes --requirepass redis123
        ports:
            - '6389:6379'
        volumes:
            - redis_data:/data
        networks:
            - nvn-network
        healthcheck:
            test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
            interval: 10s
            timeout: 3s
            retries: 5
            start_period: 10s

    # RabbitMQ Message Queue
    rabbitmq:
        image: rabbitmq:4.1-management-alpine
        container_name: nvn-rabbitmq
        restart: unless-stopped
        env_file:
            - .env.docker
        ports:
            - '5682:5672' # AMQP port
            - '15682:15672' # Management UI
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        networks:
            - nvn-network
        healthcheck:
            test: rabbitmq-diagnostics -q ping
            interval: 30s
            timeout: 30s
            retries: 3
            start_period: 60s

volumes:
    postgres_data:
        driver: local
    redis_data:
        driver: local
    rabbitmq_data:
        driver: local

networks:
    nvn-network:
        driver: bridge
